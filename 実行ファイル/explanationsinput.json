{
  "print": [
    "説明: printは、コンソールに文字列や変数の値を表示するために使用します。",
    "例: print('Hello, World!')",
  "使用方法: print('表示したい内容')",
    "使用頻度: 非常に高い\nモジュールのあとに使うことが多い"
  ],
  "input": [
    "説明: inputは、ユーザーからの入力を受け取るために使用します。",
    "例: user_input = input('何か入力してください: ')",
  "使用方法: input('ユーザーに打ってほしい内容')",
    "使用頻度: ほとんどの.pyで使う\nユーザーからの入力を受け取る場面でよく使われる。(inputの派生としてint(input())などもある)\nint(input())はユーザーからの入力を数値変換する際に使う。"
  ],
  "import": [
    "説明: importは、他のモジュールやライブラリを読み込むために使用します。",
    "例: import math",
  "使用方法: import モジュール名",
    "使用頻度: ほとんどの.pyで使う\ntimeやos、mathなどなにかしらの動きをさせる元を読み込む際に使われる。\n例として出たtimeは時間を扱う際に必須のモジュールである。"
  ],
  "if": [
    "説明: ifは、条件に応じて処理を分岐させるために使用します。",
    "例: if x > 0:",
  "使用方法: if 条件(条件はほとんどは自分で作った変数とそれに対応する数字が入る):",
    "使用頻度: 非常に高い\n対話や条件分岐、AI作成を行う際に必須のコードである。\nif文の後にelif文(else ifの略)を使うことで、さらに細かい条件分岐が可能になる。"
  ],
  "for": [
    "説明: forは、繰り返し処理を行うために使用します。",
    "例: for i in range(5):",
  "使用方法: for 変数 in range(繰り返し回数):",
    "使用頻度: あまり高くない\n繰り返し処理を行いたい場面でよく使われる。"
  ],
  "while": [
    "説明: whileは、条件が真である限り繰り返し処理を行うために使用します。",
    "例: while x < 5:",
  "使用方法: while 条件(繰り返しを終了する場合はbreakを使う):",
    "使用頻度: 高い\nループ処理を行う際に使用される。forよりも簡単。\nただし、無限ループに注意が必要である。"
  ],
  "break": [
    "説明: breakは、ループを強制的に終了させるために使用します。",
    "例: for i in range(10):\n    if i == 5:\n        break",
  "使用方法: if 条件:\n    break",
    "使用頻度: あまり高くない(繰り返しがある場合は非常に高い)\nループ処理を強制的に終了させる際に使用される。"
  ],
  "continue": [
    "説明: continueは、ループの現在の反復をスキップして次の反復に移るために使用します。",
    "例: for i in range(10):\n    if i == 5:\n        continue",
  "使用方法: if 条件:\n    continue",
    "使用頻度: あまり高くない(繰り返しがある場合は非常に高い)\nループの現在の反復をスキップして次の反復に移る際に使用される。"
  ],
  "pass": [
    "説明: passは、何もしないことを明示するために使用します。",
    "例: if 条件:\n    pass",
    "使い方: if 条件:\n    pass",
    "使用頻度: あまり高くない\n処理を一時的にスキップしたい場合に使用される。"
  ],
  "return": [
    "説明: returnは、関数から値を返すために使用します。",
    "例: return x + 1",
    "使い方: return 戻したい値",
    "使用頻度: 関数を使うならほとんどの.pyで使う\n関数を定義した際に、処理結果を返すために使用される。\nwhileやforと似たような使い方をするが、returnは関数の中でしか使えない。"
  ],
  "else": [
    "説明: elseは、if文の条件が偽である場合に実行される処理を定義するために使用します。",
    "例: if x > 0:\n    print('Positive')\nelse:\n    print('Non-positive')",
    "使い方: if 条件:\n    処理\nelse:\n    処理",
    "使用頻度: 非常に高い\nifとセットで使う場合がほとんど。\nより複雑な条件分岐を使う際に使用される。\nelif文(else ifの略)を使うことで、さらに細かい条件分岐が可能になる。"
  ],
  "math": [
    "説明: mathモジュールは、数学関連の関数や定数を提供します。",
    "例: import math",
    "使い方: import math",
    "使用頻度: 高い\n数学的な計算を行う際に使用される。\n例えば、平方根や三角関数などの計算が可能。"
  ],
  "datetime": [
    "説明: datetimeモジュールは、日付や時刻を扱うためのクラスや関数を提供します。",
    "例: import datetime",
    "使い方: import datetime",
    "使用頻度: 高い\n日付や時刻の操作を行う際に使用される。\n例えば、現在の日付や時刻の取得、日付の計算などが可能。"
  ],
  "random": [
    "説明: randomモジュールは、ランダムな数字を生成するための関数を提供します。",
    "例: import random",
    "使い方: import random",
    "使用頻度: 高い\nランダムな値が必要な場面で使用される。\n例えば、サイコロの目を生成する場合やstepを使用するときなど。"
  ],
  "os": [
    "説明: osモジュールは、オペレーティングシステム(要はパソコン本体)との対話を行うための機能を提供します。",
    "例: import os",
    "使い方: import os",
    "使用頻度: 高い\nファイルやディレクトリの操作を行う際に使用される。\n例えば、ファイルの削除やディレクトリの作成などが可能。"
  ],
  "sys": [
    "説明: sysモジュールは、Pythonの実行環境に関する情報を提供します。",
    "例: import sys",
    "使い方: import sys",
    "使用頻度: 高い\nPythonの実行環境に関する情報を取得する際に使用される。\n例えば、コマンドライン引数の取得や標準入出力の操作などが可能。"
  ],
    "re": [
    "説明: reモジュールは、正規表現を使用して文字列の処理を行うための関数を提供します。",
    "例: import re",
    "使い方: import re",
    "使用頻度: まあまあ\n文字列のパターンマッチングや置換を行う際に使用される。"
  ],
  "json": [
    "説明: jsonモジュールは、JSON形式のデータを扱うための関数を提供します。",
    "例: import json",
    "使い方: import json",
    "使用頻度: 状況による\nJSONデータの読み書きを行う際に使用される。"
  ],
  "time": [
    "説明: timeモジュールは、時間に関する機能を提供します。",
    "例: import time",
    "使い方: import time",
    "使用頻度: 高い\n時間の計測や待機を行う際に使用される。"
  ],
  "collections": [
    "説明: collectionsモジュールは、データ構造を拡張するための関数を提供します。",
    "例: import collections",
    "使い方: import collections",
    "使用頻度: 高い\nリストや辞書などのデータ構造を扱う際に使用される。"
  ],
  "itertools": [
    "説明: itertoolsモジュールは、AIの操作を強化するための関数を提供します。",
    "例: import itertools",
    "使い方: import itertools",
    "使用頻度: 高い\nAIの操作をより強化したい際に使用される。"
  ],
  "subprocess": [
    "説明: subprocessモジュールは、外部プロセスを生成し、制御するための関数を提供します。",
    "例: import subprocess",
    "使い方: import subprocess",
    "使用頻度: 高い\n外部コマンドの実行やプロセスの管理を行う際に使用される。"
  ],
  "int": [
    "説明: int()は、文字列や浮動小数点を整数に変換するために使用します。",
    "例: x = int(\"5\")",
    "使い方: int(変換したい値)",
    "使用頻度: 高い"
  ],
  "str": [
    "説明: str()は、数値やほかの型を文字列に変換するために使用します。",
    "例: s = str(100)",
    "使い方: str(変換したい値)",
    "使用頻度: 高い"
  ],
  "float": [
    "説明: float()は、整数や文字列を浮動小数点に変換するために使用します。",
    "例: f = float(\"3.14\")",
    "使い方: float(変換したい値)",
    "使用頻度: 中くらい"
  ],
  "list": [
    "説明: listは、リスト操作に必要なリストそのものを作成するために使用します。",
    "例: example_list = list((1, 2, 3))",
    "使い方: list(リストに入れたい値)",
    "使用頻度: 高い"
  ],
  "len": [
    "説明: len()は、オブジェクト(ここではリストなど)の長さを返すために使用します。",
    "例: len([1, 2, 3]) # ここでは3が出力される",
    "使い方: len(オブジェクト)",
    "使用頻度: 高い"
  ],
  "append": [
    "説明: append()は、inputなどで受け取った要素をリストに追加したいときに使用します。",
    "例: example.append(4)",
    "使い方: リスト.append(要素)",
    "使用頻度: 高い"
  ],
  "remove": [
    "説明: remove()は、inputなどで受け取った要素をリストにその要素が入っているときに限りリストから削除します。",
    "例: example_list.remove(2)",
    "使い方: リスト.remove(要素)",
    "使用頻度: 中くらい"
  ],
  "dict": [
    "説明: dictは、辞書(キーと値のペア)を作成するときに使用します。",
    "例: example_dict = dict(name=\"Alice\", age=25)",
    "使い方: dict(キー=値)",
    "使用頻度: 高い"
  ],
  "get": [
    "説明: get()は、その辞書に登録されていて、なおかつ()のなかにあるキーに対応する値を取得するときに使用します。(キーが存在しないときはNoneを返す)",
    "例: example_dict.get(\"name\")",
    "使い方: 辞書.get(キー, デフォルト値)",
    "使用頻度: 高い"
  ],
  "keys": [
    "説明: keys()は、その辞書に登録されているすべてのキーを取得するときに使用します。",
    "例: example_dict.keys()",
    "使い方: 辞書.keys()",
    "使用頻度: 中くらい"
  ],
  "def": [
    "説明: defは、関数そのものを定義する時に使用します。",
    "例: def greet():\n    print(\"Hello,world\")",
    "使い方: def 関数名(引数):",
    "使用頻度: 高い"
  ],
  "lambda": [
    "説明: lambdaは、名前なし関数を使いたいときに使用します。",
    "例: square = lambda x: x ** 2",
    "使い方: lambda 引数: 式",
    "使用頻度: 中くらい"
  ],
  "open": [
    "説明: open()は、ファイル操作を行うファイルを開くときに使用します。モード指定可能です。",
    "例: f = open(\"data.txt\", \"r\")",
    "使い方: open(ファイル名, モード)",
    "使用頻度: 高い"
  ],
  "read": [
    "説明: read()は、読み込んだファイルの内容を読み取るときに使用します。",
    "例: data = f.read()",
    "使い方: ファイルオブジェクト.read()",
    "使用頻度: 高い"
  ],
  "write": [
    "説明: write()は、openで読み込んだファイルに文字列を書き込む時に使用します。",
    "例: f.write(\"Hello\")",
    "使い方: ファイルオブジェクト.write(文字列)",
    "使用頻度: 高い"
  ],
  "with": [
    "説明: withは、ファイル操作の終了を自動的に処理するコードです。",
    "例: with open(\"data.txt\", \"r\") as f:\n    data = f.read()",
    "使い方: with open(...) as 変数:",
    "使用頻度: 高い"
  ],
  "try": [
    "説明: tryは、エラーが発生する可能性のあるコードを安全に実行するための構文です。",
    "例: try:\n         value = int(input('数値を入力してください: '))",
    "使い方: tryの中に処理を書き、exceptでエラー時の対応を記述します。",
    "使用頻度: 高い\nユーザー入力やファイル操作など、失敗の可能性がある場面でよく使われます。"
  ],
  "except": [
    "説明: exceptは、tryブロック内でエラーが発生したときに実行される処理を定義します。",
    "例: except ValueError:\n         print('数値を入力してください')",
    "使い方: exceptの後にエラーの種類を指定することで、特定の例外に対応できます。",
    "使用頻度: 高い\n複数のexceptを使って、異なるエラーに個別対応することも可能です。"
  ],
  "class": [
    "説明: classは、オブジェクト指向プログラミングで使われる構文で、データと処理をまとめた設計図を定義します。",
    "例: class Dog:\n         def __init__(self, name):\n             self.name = name",
    "使い方: classの中に関数（メソッド）や変数（属性）を定義し、インスタンス化して使います。",
    "使用頻度: 中程度\n複雑な処理や再利用性の高いコードを書くときに使われます。"
  ]
}
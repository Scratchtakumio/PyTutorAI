{
  "print": [
    "printは、コンソールに文字列や変数の値を表示するために使用します。",
    "例: print('Hello, World!')",
    "使い方： print('表示したい内容')"
  ],
  "input": [
    "inputは、ユーザーからの入力を受け取るために使用します。",
    "例: user_input = input('何か入力してください: ')",
    "使い方： input('ユーザーに打ってほしい内容')"
  ],
  "import": [
    "importは、他のモジュールやライブラリを読み込むために使用します。",
    "例: import math",
    "使い方： import モジュール名"
  ],
  "if": [
    "ifは、条件に応じて処理を分岐させるために使用します。",
    "例: if x > 0:",
    "使い方： if 条件(条件はほとんどは自分で作った変数とそれに対応する数字が入る):"
  ],
  "for": [
    "forは、繰り返し処理を行うために使用します。",
    "例: for i in range(5):",
    "使い方： for 変数 in range(繰り返し回数):"
  ],
  "while": [
    "whileは、条件が真である限り繰り返し処理を行うために使用します。",
    "例: while x < 5:",
    "使い方： while 条件(繰り返しを終了する場合はbreakを使う):"
  ],
  "break": [
    "breakは、ループを強制的に終了させるために使用します。",
    "例: for i in range(10):\n    if i == 5:\n        break",
    "使い方： if 条件:\n    break"
  ],
  "continue": [
    "continueは、ループの現在の反復をスキップして次の反復に進むために使用します。",
    "例: for i in range(10):\n    if i == 5:\n        continue",
    "使い方： if 条件:\n    continue"
  ],
  "return": [
    "returnは、関数から値を返すために使用します。",
    "例: return 値",
    "使い方： return 戻り値"
  ],
  "pass": [
    "passは、何もしないことを明示するために使用します。",
    "例: pass",
    "使い方： pass"
  ],
  "else": [
    "else、elif(else ifの略)は、if文の条件が偽である場合に実行される処理を定義するために使用します。",
    "elseの例: if x > 0:\n    print('Positive')\nelse:\n    print('Non-positive')",
    "elifの例: if x > 0:\n    print('Positive')\nelif x < 0:\n    print('Negative')\nelse:\n    print('Zero')",
    "elseの使い方： if 条件:\n    処理\nelse:\n    処理",
    "elifの使い方： if 条件:\n    処理\nelif 条件:\n    処理\nelse:\n    処理"
  ],
  "int": [
    "int()は、文字列や浮動小数点を整数に変換するために使用します。",
    "例: x = int(\"\")",
    "使い方: int(変換したい値)"
  ],
  "str": [
    "str()は、数値やほかの型を文字列に変換するために使用します。",
    "例: s = str(100)",
    "使い方: str(変換したい値)"
  ],
  "float": [
    "float()は、整数や文字列を浮動小数点に変換するために使用します。",
    "f = float(\"3.14\")",
    "使い方: float(変換したい値)"
  ],
  "list": [
    "listは、リスト操作に必要はリストそのものを作成するために使用します。",
    "例: example_list = list((1, 2, 3))",
    "使い方: list(リストに入れたい数字)"
  ],
  "len": [
    "len()は、オブジェクト(ここではリストの長さ)の長さを返す(出力)ために使用します。",
    "例: len([1, 2, 3]) # ここでは3が出力される",
    "使い方: len(オブジェクト)"
  ],
  "append": [
    "append()は、inputなどで受け取った要素をリストに追加したいときに使用します。",
    "例: example.append(4)",
    "使い方: リスト.append(要素)"
  ],
  "remove": [
    "remove()は、inputなどで受け取った要素をリストにその要素が入っているときに限りリストから削除します。",
    "例: example_list.remove(2)",
    "使い方: リスト.remove(要素)"
  ],
  "dict": [
    "dictは、辞書(キーと値のペア)を作成するときに使用します。",
    "例: example_dict = dict(name=\"Alice\", age=25)",
    "使い方: 辞書.get(キー, デフォルト値)"
  ],
  "get": [
    "get()は、その辞書に登録されていて、なおかつ()のなかにあるキーに対応する値を取得するときに使用します。(キーが存在しないときはNoneを返す)",
    "例: example_dict.get(\"name\")",
    "使い方: 辞書.get(キー, デフォルト値)"
  ],
  "keys": [
    "keys()は、その辞書に登録されているすべてのキーを取得するときに使用します。",
    "例: example_dict.keys()",
    "使い方: 辞書.keys()"
  ],
  "def": [
    "defは、関数そのものを定義する時に使用します。",
    "例: \ndef greet(): \nprint(\"Hello,world\")",
    "使い方: def 関数名(引数):"
  ],
  "lambda": [
    "lambdaは、名前なし関数を使いたいときに使用します。",
    "例: square = lambda x: x ** 2",
    "使い方: lambda 引数: 式"
  ],
  "open": [
    "open()は、ファイル操作を行うファイルを開くときに使用します。モード指定可能です。",
    "例: f = open(\"data.txt\", \"r\")",
    "使い方: open(ファイル名, モード)"
  ],
  "read": [
    "read()は、読み込んだファイルの内容を読み取るときに使用します。",
    "例: data = f.read()",
    "使い方: ファイルオブジェクト.read()"
  ],
  "write": [
    "write()は、openで読み込んだファイルに文字列を書き込む時に使用します。",
    "例: f.write(\"Hello\")",
    "使い方: ファイルオブジェクト.write(文字列)"
  ],
  "with": [
    "withは、ファイル操作の終了を自動的に処理するコードです。",
    "例: \nwith open(\"data.txt\", \"r\") as f: \n    data = f.read()",
    "使い方: 上記の通り"
  ]
}
